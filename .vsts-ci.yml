# Pipeline: https://dev.azure.com/dnceng/internal/_build?definitionId=286

trigger:
  batch: true
  branches:
    include:
    - main
    - release/9.0.1xx-preview*
    - internal/release/*
    - exp/*

pr:
  branches:
    include:
    - main
    - release/*
    - internal/release/*

parameters:
- name: runTests
  displayName: Run Tests
  type: boolean
  default: false

variables:
- template: /eng/pipelines/templates/variables/sdk-defaults.yml
# Variables used: DncEngInternalBuildPool
- template: /eng/common/templates-official/variables/pool-providers.yml
# Variables used: dotnetbuilds-internal-container-read-token-base64
- group: DotNetBuilds storage account read tokens
- name: runtimeSourceProperties
  value: /p:DotNetRuntimeSourceFeed=https://dotnetbuilds.blob.core.windows.net/internal /p:DotNetRuntimeSourceFeedKey=$(dotnetbuilds-internal-container-read-token-base64)
# Helix testing requires a token when internally run.
# Variables used: HelixApiAccessToken
- group: DotNet-HelixApi-Access
# Runs a signed build by disabling post-build signing for release-branch builds or manual builds that are not running tests.
# This is used by Arcade.
- ${{ if and(eq(parameters.runTests, false), or(startswith(variables['Build.SourceBranch'], 'refs/heads/release/'), startswith(variables['Build.SourceBranch'], 'refs/heads/internal/release/'), eq(variables['Build.Reason'], 'Manual'))) }}:
  - name: PostBuildSign
    value: false
# TODO: What is this for?
- ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
  - group: DotNet-CLI-SDLValidation-Params
# Set the MicroBuild plugin installation directory to the agent temp directory to avoid SDL tool scanning.
# - name: MicroBuildOutputFolderOverride
#   value: $(Agent.TempDirectory)

resources:
  repositories:
  - repository: 1esPipelines
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release

extends:
  ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
    template: v1/1ES.Official.PipelineTemplate.yml@1esPipelines
  ${{ else }}:
    template: v1/1ES.Unofficial.PipelineTemplate.yml@1esPipelines
  parameters:
    containers:
      alpine319WithNode:
        image: mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.19-WithNode
      cblMariner20Fpm:
        image: mcr.microsoft.com/dotnet-buildtools/prereqs:cbl-mariner-2.0-fpm
      centosStream9:
        image: mcr.microsoft.com/dotnet-buildtools/prereqs:centos-stream9
      debian11Amd64:
        image: mcr.microsoft.com/dotnet-buildtools/prereqs:debian-11-amd64
      fedora39:
        image: mcr.microsoft.com/dotnet-buildtools/prereqs:fedora-39
      ubuntu2204:
        image: mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-22.04
      mariner20CrossArm:
        image: mcr.microsoft.com/dotnet-buildtools/prereqs:cbl-mariner-2.0-cross-arm
      ubuntu2204DebPkg:
        image: mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-22.04-debpkg
    sdl:
      sourceAnalysisPool:
        name: $(DncEngInternalBuildPool)
        image: 1es-windows-2022
        os: windows
      # componentgovernance:
      #   # Setting to Critical as aspnet templates currently cause a High alert (default alert level is High).
      #   # See: https://dev.azure.com/dnceng/internal/_componentGovernance/dotnet-sdk/alert/9439021?typeId=6422467
      #   # Refdoc: https://docs.opensource.microsoft.com/tools/cg/component-detection/variables/
      #   alertWarningLevel: Critical
    stages:
    - stage: build
      displayName: Build
      jobs:
      # - job: Publish_Build_Configuration
      #   pool:
      #     name: $(DncEngInternalBuildPool)
      #     image: 1es-windows-2022
      #     os: windows
      #   steps:
      #     - task: 1ES.PublishPipelineArtifact@1
      #       displayName: Publish Build Config
      #       inputs:
      #         targetPath: $(Build.SourcesDirectory)\eng\buildConfiguration
      #         artifactName: buildConfiguration

      #################### SOURCE BUILD ####################

      # - template: /eng/common/templates-official/job/source-build.yml@self
      #   parameters:
      #     platform:
      #       name: Managed
      #       container: mcr.microsoft.com/dotnet-buildtools/prereqs:centos-stream9


      ############### WINDOWS ###############
      - template: /eng/pipelines/templates/jobs/sdk-build.yml@self
        parameters:
          pool:
            name: $(DncEngInternalBuildPool)
            image: 1es-windows-2022
            os: windows
          helixTargetQueue: windows.amd64.vs2022.pre
          oneEsPtCompat:
            jobTemplatePath: /eng/common/templates-official/job/job.yml
            publishTaskName: 1ES.PublishBuildArtifacts@1
          variables:
            runTests: ${{ parameters.runTests }}
            # Setting this here once so it can be reused in the matrix only.
            _officialBuildProperties: /p:DotNetPublishUsingPipelines=true /p:OfficialBuilder=Microsoft /p:OfficialBuildId=$(Build.BuildNumber)
          strategy:
            matrix:
              ${{ if and(eq(parameters.runTests, false), ne(variables['Build.Reason'], 'PullRequest')) }}:
                Official:
                  publishArgument: -publish
                  _SignType: real
                  officialBuildProperties: $(_officialBuildProperties)
                Official_x86:
                  buildArchitecture: x86
                  publishArgument: -publish
                  _SignType: real
                  officialBuildProperties: $(_officialBuildProperties)
                Official_arm64:
                  buildArchitecture: arm64
                  publishArgument: -publish
                  _SignType: real
                  officialBuildProperties: $(_officialBuildProperties)
              ${{ else }}:
                Test: {}
                FullFramework:
                  testFullMSBuild: true
                TestAsTools:
                  testInBuildProperties: /p:RunTestsAsTool=true
                  # This uses the build step for testing, so the extra test step is not necessary.
                  runTests: false
                TemplateEngine:
                  testName: TemplateEngineTests
                  testProjects: $(Build.SourcesDirectory)/test/Microsoft.TemplateEngine.Cli.UnitTests/Microsoft.TemplateEngine.Cli.UnitTests.csproj;
                    $(Build.SourcesDirectory)/test/dotnet-new.Tests/dotnet-new.IntegrationTests.csproj
                AoT:
                  runAoTTests: true



      # - ${{ if in(variables['Build.Reason'], 'PullRequest') }}:
      #   # dotnet-format builds
      #   - template: /eng/dotnet-format/dotnet-format-integration.yml@self
      #     parameters:
      #       PublishTaskName: 1ES.PublishBuildArtifacts@1

      #   - template: /eng/build.yml@self
      #     parameters:
      #       agentOs: Ubuntu_22_04
      #       pool:
      #         ${{ if eq(variables['System.TeamProject'], 'public') }}:
      #           name: $(DncEngPublicBuildPool)
      #           image: 1es-ubuntu-2204-open
      #           os: linux
      #         ${{ if ne(variables['System.TeamProject'], 'public') }}:
      #           name: $(DncEngInternalBuildPool)
      #           image: 1es-ubuntu-2204
      #           os: linux
      #       ${{ if eq(variables['System.TeamProject'], 'public') }}:
      #         helixTargetQueue: ubuntu.2204.amd64.open
      #       ${{ if ne(variables['System.TeamProject'], 'public') }}:
      #         helixTargetQueue: Ubuntu.2204.Amd64
      #       variables:
      #       - name: _BuildConfig
      #         value: Release
      #       - name: _PublishArgs
      #         value: ''
      #       - name: _SignType
      #         value: test
      #       - name: _Test
      #         value: -test

      #   - template: /eng/build.yml@self
      #     parameters:
      #       agentOs: Darwin
      #       pool:
      #         name: Azure Pipelines
      #         image: macOS-latest
      #         os: macOS
      #       ${{ if eq(variables['System.TeamProject'], 'public') }}:
      #         helixTargetQueue: OSX.13.Amd64.Open
      #       ${{ if ne(variables['System.TeamProject'], 'public') }}:
      #         helixTargetQueue: OSX.13.Amd64
      #       variables:
      #       - name: _BuildConfig
      #         value: Release
      #       - name: _PublishArgs
      #         value: ''
      #       - name: _SignType
      #         value: test
      #       - name: _Test
      #         value: -test

      #     # template-engine builds
      #   - template: /eng/build.yml@self
      #     parameters:
      #       agentOs: Ubuntu_22_04_TemplateEngine
      #       pool:
      #         ${{ if eq(variables['System.TeamProject'], 'public') }}:
      #           name: $(DncEngPublicBuildPool)
      #           image: 1es-ubuntu-2204-open
      #           os: linux
      #         ${{ if ne(variables['System.TeamProject'], 'public') }}:
      #           name: $(DncEngInternalBuildPool)
      #           image: 1es-ubuntu-2204
      #           os: linux
      #       ${{ if eq(variables['System.TeamProject'], 'public') }}:
      #         helixTargetQueue: 'ubuntu.2204.amd64.open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-22.04-helix-amd64'
      #       ${{ if ne(variables['System.TeamProject'], 'public') }}:
      #         helixTargetQueue: Ubuntu.2204.Amd64
      #       variables:
      #         - name: _BuildConfig
      #           value: Release
      #         - name: _PublishArgs
      #           value: ''
      #         - name: _SignType
      #           value: test
      #         - name: _Test
      #           value: -test

      #   - template: /eng/build.yml@self
      #     parameters:
      #       agentOs: Darwin_TemplateEngine
      #       pool:
      #         name: Azure Pipelines
      #         image: macOS-latest
      #         os: macOS
      #       ${{ if eq(variables['System.TeamProject'], 'public') }}:
      #         helixTargetQueue: OSX.1100.Amd64.Open
      #       ${{ if ne(variables['System.TeamProject'], 'public') }}:
      #         helixTargetQueue: OSX.1100.Amd64
      #       variables:
      #       - name: _BuildConfig
      #         value: Release
      #       - name: _PublishArgs
      #         value: ''
      #       - name: _SignType
      #         value: test
      #       - name: _Test
      #         value: -test

      ############### NON-WINDOWS ###############
      - template: /eng/pipelines/templates/jobs/sdk-build.yml@self
        parameters:
          pool:
            name: $(DncEngInternalBuildPool)
            image: 1es-ubuntu-2204
            os: linux
          helixTargetQueue: ubuntu.2204.amd64
          container: ubuntu2204
          oneEsPtCompat:
            jobTemplatePath: /eng/common/templates-official/job/job.yml
            publishTaskName: 1ES.PublishBuildArtifacts@1
          # buildScriptPath: eng/common/build.sh
          variables:
            runTests: ${{ parameters.runTests }}
            # Setting this here once so it can be reused in the matrix only.
            _officialBuildProperties: /p:DotNetPublishUsingPipelines=true /p:OfficialBuilder=Microsoft /p:OfficialBuildId=$(Build.BuildNumber)
          strategy:
            matrix:
              ${{ if and(eq(parameters.runTests, false), ne(variables['Build.Reason'], 'PullRequest')) }}:
                Official:
                  publishArgument: -publish
                  _SignType: real
                  officialBuildProperties: $(_officialBuildProperties)
                Official_x86:
                  buildArchitecture: x86
                  publishArgument: -publish
                  _SignType: real
                  officialBuildProperties: $(_officialBuildProperties)
                Official_arm64:
                  buildArchitecture: arm64
                  publishArgument: -publish
                  _SignType: real
                  officialBuildProperties: $(_officialBuildProperties)
              # ${{ else }}:
              #   Test: {}
              #   FullFramework:
              #     testFullMSBuild: true
              #   TestAsTools:
              #     testInBuildProperties: /p:RunTestsAsTool=true
              #     # This uses the build step for testing, so the extra test step is not necessary.
              #     runTests: false
              #   TemplateEngine:
              #     testName: TemplateEngineTests
              #     testProjects: $(Build.SourcesDirectory)/test/Microsoft.TemplateEngine.Cli.UnitTests/Microsoft.TemplateEngine.Cli.UnitTests.csproj;
              #       $(Build.SourcesDirectory)/test/dotnet-new.Tests/dotnet-new.IntegrationTests.csproj
              #   AoT:
              #     runAoTTests: true






    #   - ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
    #     - template: /eng/common/templates-official/job/publish-build-assets.yml@self
    #       parameters:
    #         publishUsingPipelines: true
    #         publishAssetsImmediately: true
    #         dependsOn:
    #         - Windows_NT
    #         - Source_Build_Managed
    #         pool:
    #           name: $(DncEngInternalBuildPool)
    #           image: 1es-windows-2022
    #           os: windows

    # - ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
    #   - template: /eng/common/templates-official/post-build/post-build.yml@self
    #     parameters:
    #       publishingInfraVersion: 3
    #       enableSymbolValidation: false
    #       enableSigningValidation: false
    #       enableNugetValidation: false
    #       enableSourceLinkValidation: false
    #       publishInstallersAndChecksums: true
    #       publishAssetsImmediately: true
    #       SDLValidationParameters:
    #         enable: false
    #         params: ' -SourceToolsList @("policheck","credscan")
    #         -TsaInstanceURL $(_TsaInstanceURL)
    #         -TsaProjectName $(_TsaProjectName)
    #         -TsaNotificationEmail $(_TsaNotificationEmail)
    #         -TsaCodebaseAdmin $(_TsaCodebaseAdmin)
    #         -TsaBugAreaPath $(_TsaBugAreaPath)
    #         -TsaIterationPath $(_TsaIterationPath)
    #         -TsaRepositoryName "dotnet-sdk"
    #         -TsaCodebaseName "dotnet-sdk"
    #         -TsaPublish $True'
