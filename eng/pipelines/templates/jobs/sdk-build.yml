parameters:
  variables: []
  oneEsPtCompat:
    jobTemplatePath: /eng/common/templates/job/job.yml
    publishTaskName: PublishBuildArtifacts@1
  container: ''
  categoryName: Build
  buildArchitecture: x64
  runTests: true
  testProjects: $(Build.SourcesDirectory)/test/UnitTests.proj
  ### ENV VARS ###
  testFullMSBuild: false
  runAoTTests: false
  ### MSBUILD ###
  publishArgument: ''
  runTestsAsTool: false
  runtimeSourceProperties: ''
  runtimeIdentifierProperties: ''
  officialBuildProperties: ''

jobs:
- template: ${{ parameters.oneEsPtCompat.jobTemplatePath }}
  parameters:
    ${{ if eq(parameters.container, '') }}:
      name: ${{ parameters.categoryName }}_${{ parameters.pool.os }}_${{ parameters.buildArchitecture }}
      displayName: "${{ parameters.categoryName }}: ${{ parameters.pool.os }} (${{ parameters.buildArchitecture }})"
    ${{ else }}:
      name: ${{ parameters.categoryName }}_${{ parameters.pool.os }}_${{ parameters.buildArchitecture }}_${{ parameters.container }}
      displayName: "${{ parameters.categoryName }}: ${{ parameters.pool.os }} (${{ parameters.buildArchitecture }}) [${{ parameters.container }}]"
    pool: ${{ parameters.pool }}
    container: ${{ parameters.container }}
    strategy: ${{ parameters.strategy }}
    helixRepo: dotnet/sdk
    timeoutInMinutes: 180
    enableMicrobuild: true
    enablePublishBuildAssets: true
    enableTelemetry: true
    enablePublishUsingPipelines: true
    variables:
    - ${{ insert }}: ${{ parameters.variables }}

    steps:
    ############## PREP ###############
    - ${{ if ne(variables['System.TeamProject'], 'public') }}:
      - ${{ if eq(parameters.pool.os, 'windows') }}:
        - powershell: $(Build.SourcesDirectory)/eng/common/SetupNugetSources.ps1 -ConfigFile $(Build.SourcesDirectory)/NuGet.config -Password $Env:Token
          displayName: Setup Private Feeds Credentials
          env:
            Token: $(dn-bot-dnceng-artifact-feeds-rw)
      - ${{ else }}:
        - script: ./$(Build.SourcesDirectory)/eng/common/SetupNugetSources.sh $(Build.SourcesDirectory)/NuGet.config $Token
          displayName: Setup Private Feeds Credentials
          env:
            Token: $(dn-bot-dnceng-artifact-feeds-rw)

    ############### BUILDING ###############
    - ${{ if eq(parameters.pool.os, 'windows') }}:
      - powershell: eng/common/build.ps1
          -restore -build -sign -pack -ci -nativeToolsOnMachine
          -configuration $(buildConfiguration)
          ${{ parameters.publishArgument }}
          /p:Architecture=${{ parameters.buildArchitecture }}
          /p:RunTestsAsTool=${{ parameters.runTestsAsTool }}
          ${{ parameters.runtimeSourceProperties }}
          ${{ parameters.runtimeIdentifierProperties }}
          ${{ parameters.officialBuildProperties }}
          /p:DotNetSignType=$(_SignType) /p:TeamName=$(_TeamName)
        displayName: Build
        env:
          # Required by Arcade for passing to Helix
          SYSTEM_ACCESSTOKEN: $(System.AccessToken)
          # Only set when ran internally
          HelixAccessToken: $(HelixApiAccessToken)
          BuildConfig: $(buildConfiguration)
          TestFullMSBuild: ${{ parameters.testFullMSBuild }}
    - ${{ else }}:
      - script: eng/common/build.sh
          -restore -build -sign -pack -ci
          -configuration $(buildConfiguration)
          ${{ parameters.publishArgument }}
          /p:Architecture=${{ parameters.buildArchitecture }}
          /p:RunTestsAsTool=${{ parameters.runTestsAsTool }}
          ${{ parameters.runtimeSourceProperties }}
          ${{ parameters.runtimeIdentifierProperties }}
          ${{ parameters.officialBuildProperties }}
          /p:DotNetSignType=$(_SignType) /p:TeamName=$(_TeamName)
        displayName: Build
        env:
          # Required by Arcade for passing to Helix
          SYSTEM_ACCESSTOKEN: $(System.AccessToken)
          # Only set when ran internally
          HelixAccessToken: $(HelixApiAccessToken)
          BuildConfig: $(buildConfiguration)
          TestFullMSBuild: ${{ parameters.testFullMSBuild }}

    ############### TESTING ###############
    - ${{ if eq(parameters.runTests, true) }}:
      - ${{ if eq(parameters.pool.os, 'windows') }}:
        # TODO: Change _CustomHelixTargetQueue name
        - powershell: eng/common/build.ps1
            -restore -test -ci -prepareMachine -nativeToolsOnMachine
            -configuration $(buildConfiguration)
            -projects ${{ parameters.testProjects }}
            /p:Architecture=${{ parameters.buildArchitecture }}
            ${{ parameters.runtimeSourceProperties }}
            ${{ parameters.runtimeIdentifierProperties }}
            /p:_CustomHelixTargetQueue=${{ parameters.helixTargetQueue }}
            /bl:$(Build.SourcesDirectory)/artifacts/log/$(buildConfiguration)/${{ parameters.categoryName }}Tests.binlog
          displayName: Run ${{ parameters.categoryName }} Tests
          condition: succeeded()
          env:
            # Required by Arcade for passing to Helix
            SYSTEM_ACCESSTOKEN: $(System.AccessToken)
            # Only set when ran internally
            HelixAccessToken: $(HelixApiAccessToken)
            RunAoTTests: ${{ parameters.runAoTTests }}
      - ${{ else }}:
        - script: eng/common/build.sh
            -restore -test -ci -prepareMachine
            -configuration $(buildConfiguration)
            -projects ${{ parameters.testProjects }}
            /p:Architecture=${{ parameters.buildArchitecture }}
            ${{ parameters.runtimeSourceProperties }}
            ${{ parameters.runtimeIdentifierProperties }}
            /p:_CustomHelixTargetQueue=${{ parameters.helixTargetQueue }}
            /bl:$(Build.SourcesDirectory)/artifacts/log/$(buildConfiguration)/${{ parameters.categoryName }}Tests.binlog
          displayName: Run ${{ parameters.categoryName }} Tests
          condition: succeeded()
          env:
            # Required by Arcade for passing to Helix
            SYSTEM_ACCESSTOKEN: $(System.AccessToken)
            # Only set when ran internally
            HelixAccessToken: $(HelixApiAccessToken)
            RunAoTTests: ${{ parameters.runAoTTests }}

    # ############### NON-WINDOWS ###############
    # - ${{ else }}:
    #   ############### BUILDING ###############
    #   - ${{ if ne(variables['System.TeamProject'], 'public') }}:
    #     - script: $(Build.SourcesDirectory)/eng/common/SetupNugetSources.sh $(Build.SourcesDirectory)/NuGet.config $Token
    #       displayName: Setup Private Feeds Credentials
    #       env:
    #         Token: $(dn-bot-dnceng-artifact-feeds-rw)

    #   - powershell: eng/common/build.ps1
    #       -restore -build -sign -pack -ci -nativeToolsOnMachine
    #       -configuration $(buildConfiguration)
    #       $(publishArgument)
    #       /p:Architecture=$(buildArchitecture)
    #       $(runtimeSourceProperties)
    #       $(testInBuildProperties)
    #       $(officialBuildProperties)
    #     displayName: Build
    #     env:
    #       # Required by Arcade for passing to Helix
    #       SYSTEM_ACCESSTOKEN: $(System.AccessToken)
    #       # Only set when ran internally
    #       HelixAccessToken: $(HelixApiAccessToken)
    #       BuildConfig: $(buildConfiguration)
    #       TestFullMSBuild: $(testFullMSBuild)

    #   ############### TESTING ###############
    #   # TODO: Change _CustomHelixTargetQueue name
    #   - powershell: eng/common/build.ps1
    #       -restore -test -ci -nativeToolsOnMachine -prepareMachine
    #       -configuration $(buildConfiguration)
    #       -projects $(testProjects)
    #       /p:Architecture=$(buildArchitecture)
    #       $(runtimeSourceProperties)
    #       /p:_CustomHelixTargetQueue=${{ parameters.helixTargetQueue }}
    #       /bl:$(Build.SourcesDirectory)/artifacts/log/$(buildConfiguration)/$(testName).binlog
    #     displayName: Run $(testName)
    #     condition: and(succeeded(), eq(variables.runTests, true))
    #     env:
    #       # Required by Arcade for passing to Helix
    #       SYSTEM_ACCESSTOKEN: $(System.AccessToken)
    #       # Only set when ran internally
    #       HelixAccessToken: $(HelixApiAccessToken)
    #       RunAoTTests: $(runAoTTests)








    ############### POST ###############
    - task: CopyFiles@2
      displayName: Copy Logs
      inputs:
        SourceFolder: $(Build.SourcesDirectory)/artifacts
        ${{ if eq(parameters.runTests, false) }}:
          Contents: |
            log/$(buildConfiguration)/**/*
            TestResults/$(buildConfiguration)/**/*
            SymStore/$(buildConfiguration)/**/*
            tmp/$(buildConfiguration)/**/*.binlog
        ${{ else }}:
          Contents: |
            log/$(buildConfiguration)/**/*
            TestResults/$(buildConfiguration)/**/*
            tmp/$(buildConfiguration)/**/*.binlog
        TargetFolder: $(Build.ArtifactStagingDirectory)
      continueOnError: true
      condition: always()

    - task: ${{ parameters.oneEsPtCompat.publishTaskName }}
      displayName: Publish Logs
      inputs:
        PathtoPublish: $(Build.ArtifactStagingDirectory)
        # TODO: Figure out appropriate artifact name
        ArtifactName: ${{ parameters.name }}
        publishLocation: Container
      continueOnError: true
      condition: always()
