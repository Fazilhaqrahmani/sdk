parameters:
  oneEsPt:
    jobTemplatePath: /eng/common/templates/job/job.yml
    publishTaskName: PublishBuildArtifacts@1
  # buildCategory: Build
  buildArchitecture: x64
  # # Agent OS identifier and used as job name
  # agentOs: ''
  # # Agent pool
  # pool: {}
  # # Additional variables
  # variables: {}
  # # Build strategy - matrix
  # strategy: ''

jobs:
- template: ${{ parameters.oneEsPt.jobTemplatePath }}
  parameters:
    name: ${{ variables['System.JobName'] }}_${{ parameters.pool.os }}_${{ parameters.buildArchitecture }}
    displayName: ${{ variables['System.JobName'] }} ${{ parameters.pool.os }} ${{ parameters.buildArchitecture }}
    pool: ${{ parameters.pool }}
    strategy: ${{ parameters.strategy }}
    helixRepo: dotnet/sdk
    timeoutInMinutes: 180
    enableMicrobuild: true
    enablePublishBuildAssets: true
    enableTelemetry: true
    enablePublishUsingPipelines: true
    # variables:
    # - ${{ insert }}: ${{ parameters.variables }}

    steps:
    ############### WINDOWS ###############
    - ${{ if eq(parameters.pool.os, 'windows') }}:
      ############### BUILDING ###############
      - ${{ if ne(variables['System.TeamProject'], 'public') }}:
        - powershell: $(Build.SourcesDirectory)/eng/common/SetupNugetSources.ps1 -ConfigFile $(Build.SourcesDirectory)/NuGet.config -Password $Env:Token
          displayName: Setup Private Feeds Credentials
          env:
            Token: $(dn-bot-dnceng-artifact-feeds-rw)

      - powershell: eng/common/build.ps1
          -restore -build -sign -pack -ci -nativeToolsOnMachine
          -configuration $(buildConfiguration)
          $(publishArgument)
          $(runtimeSourceProperties)
          $(testInBuildProperties)
          $(officialBuildProperties)
        displayName: Build
        env:
          # Required by Arcade
          SYSTEM_ACCESSTOKEN: $(System.AccessToken)
          # Only set when ran internally
          HelixAccessToken: $(HelixApiAccessToken)
          BuildConfig: $(buildConfiguration)
          TestFullMSBuild: $(testFullMSBuild)

      ############### TESTING ###############
      - powershell: eng/common/build.ps1
          -restore -test -ci -nativeToolsOnMachine -prepareMachine
          -configuration $(buildConfiguration)
          -projects $(testProjects)
          $(runtimeSourceProperties)
          /p:_CustomHelixTargetQueue=${{ parameters.helixTargetQueue }}
          /bl:$(Build.SourcesDirectory)/artifacts/log/$(buildConfiguration)/$(testName).binlog
        displayName: Run $(testName)
        condition: and(succeeded(), eq(variables.runTests, true))
        env:
          # Required by Arcade
          SYSTEM_ACCESSTOKEN: $(System.AccessToken)
          # Only set when ran internally
          HelixAccessToken: $(HelixApiAccessToken)
          RunAoTTests: $(runAoTTests)





    # - ${{ if notIn(parameters.agentOs, 'Windows_NT', 'Windows_NT_FullFramework', 'Windows_NT_TestAsTools') }}:
    #   - script: eng/common/build.sh
    #               $(_CIBuild)
    #               --configuration $(_BuildConfig)
    #               $(_SignArgs)
    #               $(_OfficialBuildIdArgs)
    #               $(_InternalRuntimeDownloadArgs)
    #               -p:Test=false
    #     continueOnError: false
    #     displayName: Build
    #     env:
    #       BuildConfig: $(_BuildConfig)
    #   - powershell: eng/common/build.sh
    #           -configuration $(_BuildConfig)
    #           -prepareMachine
    #           -ci
    #           -restore
    #           -test
    #           -projects $(Build.SourcesDirectory)/test/UnitTests.proj
    #           /bl:$(Build.SourcesDirectory)/artifacts/log/$(_BuildConfig)/TestInHelix.binlog
    #           /p:_CustomHelixTargetQueue=${{ parameters.helixTargetQueue }}
    #           $(_InternalRuntimeDownloadArgs)
    #     displayName: Run Tests in Helix
    #     condition: succeededOrFailed()
    #     env:
    #         SYSTEM_ACCESSTOKEN: $(System.AccessToken)
    #         HelixAccessToken: $(_HelixApiToken)
    #         RunAoTTests: 'false'


    - task: CopyFiles@2
      displayName: Copy Logs
      inputs:
        SourceFolder: $(Build.SourcesDirectory)/artifacts
        Contents: |
          log/$(buildConfiguration)/**/*
          TestResults/$(buildConfiguration)/**/*
          SymStore/$(buildConfiguration)/**/*
          tmp/$(buildConfiguration)/**/*.binlog
        TargetFolder: $(Build.ArtifactStagingDirectory)
      continueOnError: true
      condition: always()

    - task: ${{ parameters.oneEsPt.publishTaskName }}
      displayName: Publish Logs
      inputs:
        PathtoPublish: $(Build.ArtifactStagingDirectory)
        ArtifactName: ${{ parameters.pool.os }}_$(Agent.JobName)_$(Build.BuildNumber)
        publishLocation: Container
      continueOnError: true
      condition: always()
