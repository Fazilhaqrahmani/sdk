parameters:
  oneEsPtCompat:
    jobTemplatePath: /eng/common/templates/job/job.yml
    publishTaskName: PublishBuildArtifacts@1
  container: ''

jobs:
- template: ${{ parameters.oneEsPtCompat.jobTemplatePath }}
  parameters:
    name: ${{ parameters.pool.os }}
    displayName: ${{ parameters.pool.os }}
    pool: ${{ parameters.pool }}
    # ${{ if ne(parameters.container, '') }}:
    container: ${{ parameters.container }}
    strategy: ${{ parameters.strategy }}
    helixRepo: dotnet/sdk
    timeoutInMinutes: 180
    enableMicrobuild: true
    enablePublishBuildAssets: true
    enableTelemetry: true
    enablePublishUsingPipelines: true
    variables:
    - ${{ insert }}: ${{ parameters.variables }}

    steps:
    ############### WINDOWS ###############
    # - ${{ if eq(parameters.pool.os, 'windows') }}:
    ############### PREP ###############
    # - ${{ if ne(variables['System.TeamProject'], 'public') }}:
    #   - ${{ if eq(parameters.pool.os, 'windows') }}:
    #     - powershell: $(Build.SourcesDirectory)/eng/common/SetupNugetSources.ps1 -ConfigFile $(Build.SourcesDirectory)/NuGet.config -Password $Env:Token
    #       displayName: Setup Private Feeds Credentials
    #       env:
    #         Token: $(dn-bot-dnceng-artifact-feeds-rw)
    #   - ${{ else }}:
    #     - script: $(Build.SourcesDirectory)/eng/common/SetupNugetSources.sh $(Build.SourcesDirectory)/NuGet.config $Token
    #       displayName: Setup Private Feeds Credentials
    #       env:
    #         Token: $(dn-bot-dnceng-artifact-feeds-rw)

    ############### BUILDING ###############
    - ${{ if eq(parameters.pool.os, 'windows') }}:
      - powershell: eng/common/build.ps1
          -restore -build -sign -pack -ci -nativeToolsOnMachine
          -configuration $(buildConfiguration)
          $(publishArgument)
          /p:Architecture=$(buildArchitecture)
          $(runtimeSourceProperties)
          $(runtimeIdentifierProperties)
          $(testInBuildProperties)
          $(officialBuildProperties)
          /p:DotNetSignType=$(_SignType) /p:TeamName=$(_TeamName)
        displayName: Build
        env:
          # Required by Arcade for passing to Helix
          SYSTEM_ACCESSTOKEN: $(System.AccessToken)
          # Only set when ran internally
          HelixAccessToken: $(HelixApiAccessToken)
          BuildConfig: $(buildConfiguration)
          TestFullMSBuild: $(testFullMSBuild)
      - ${{ else }}:
        - script: eng/common/build.sh
            -restore -build -sign -pack -ci -nativeToolsOnMachine
            -configuration $(buildConfiguration)
            $(publishArgument)
            /p:Architecture=$(buildArchitecture)
            $(runtimeSourceProperties)
            $(runtimeIdentifierProperties)
            $(testInBuildProperties)
            $(officialBuildProperties)
            /p:DotNetSignType=$(_SignType) /p:TeamName=$(_TeamName)
          displayName: Build
          env:
            # Required by Arcade for passing to Helix
            SYSTEM_ACCESSTOKEN: $(System.AccessToken)
            # Only set when ran internally
            HelixAccessToken: $(HelixApiAccessToken)
            BuildConfig: $(buildConfiguration)
            TestFullMSBuild: $(testFullMSBuild)

    ############### TESTING ###############
    - ${{ if eq(parameters.pool.os, 'windows') }}:
      # TODO: Change _CustomHelixTargetQueue name
      - powershell: eng/common/build.ps1
          -restore -test -ci -nativeToolsOnMachine -prepareMachine
          -configuration $(buildConfiguration)
          -projects $(testProjects)
          /p:Architecture=$(buildArchitecture)
          $(runtimeSourceProperties)
          $(runtimeIdentifierProperties)
          /p:_CustomHelixTargetQueue=${{ parameters.helixTargetQueue }}
          /bl:$(Build.SourcesDirectory)/artifacts/log/$(buildConfiguration)/$(testName).binlog
        displayName: Run $(testName)
        condition: and(succeeded(), eq(variables.runTests, true))
        env:
          # Required by Arcade for passing to Helix
          SYSTEM_ACCESSTOKEN: $(System.AccessToken)
          # Only set when ran internally
          HelixAccessToken: $(HelixApiAccessToken)
          RunAoTTests: $(runAoTTests)
    - ${{ else }}:
      - script: eng/common/build.sh
          -restore -test -ci -nativeToolsOnMachine -prepareMachine
          -configuration $(buildConfiguration)
          -projects $(testProjects)
          /p:Architecture=$(buildArchitecture)
          $(runtimeSourceProperties)
          $(runtimeIdentifierProperties)
          /p:_CustomHelixTargetQueue=${{ parameters.helixTargetQueue }}
          /bl:$(Build.SourcesDirectory)/artifacts/log/$(buildConfiguration)/$(testName).binlog
        displayName: Run $(testName)
        condition: and(succeeded(), eq(variables.runTests, true))
        env:
          # Required by Arcade for passing to Helix
          SYSTEM_ACCESSTOKEN: $(System.AccessToken)
          # Only set when ran internally
          HelixAccessToken: $(HelixApiAccessToken)
          RunAoTTests: $(runAoTTests)

    # ############### NON-WINDOWS ###############
    # - ${{ else }}:
    #   ############### BUILDING ###############
    #   - ${{ if ne(variables['System.TeamProject'], 'public') }}:
    #     - script: $(Build.SourcesDirectory)/eng/common/SetupNugetSources.sh $(Build.SourcesDirectory)/NuGet.config $Token
    #       displayName: Setup Private Feeds Credentials
    #       env:
    #         Token: $(dn-bot-dnceng-artifact-feeds-rw)

    #   - powershell: eng/common/build.ps1
    #       -restore -build -sign -pack -ci -nativeToolsOnMachine
    #       -configuration $(buildConfiguration)
    #       $(publishArgument)
    #       /p:Architecture=$(buildArchitecture)
    #       $(runtimeSourceProperties)
    #       $(testInBuildProperties)
    #       $(officialBuildProperties)
    #     displayName: Build
    #     env:
    #       # Required by Arcade for passing to Helix
    #       SYSTEM_ACCESSTOKEN: $(System.AccessToken)
    #       # Only set when ran internally
    #       HelixAccessToken: $(HelixApiAccessToken)
    #       BuildConfig: $(buildConfiguration)
    #       TestFullMSBuild: $(testFullMSBuild)

    #   ############### TESTING ###############
    #   # TODO: Change _CustomHelixTargetQueue name
    #   - powershell: eng/common/build.ps1
    #       -restore -test -ci -nativeToolsOnMachine -prepareMachine
    #       -configuration $(buildConfiguration)
    #       -projects $(testProjects)
    #       /p:Architecture=$(buildArchitecture)
    #       $(runtimeSourceProperties)
    #       /p:_CustomHelixTargetQueue=${{ parameters.helixTargetQueue }}
    #       /bl:$(Build.SourcesDirectory)/artifacts/log/$(buildConfiguration)/$(testName).binlog
    #     displayName: Run $(testName)
    #     condition: and(succeeded(), eq(variables.runTests, true))
    #     env:
    #       # Required by Arcade for passing to Helix
    #       SYSTEM_ACCESSTOKEN: $(System.AccessToken)
    #       # Only set when ran internally
    #       HelixAccessToken: $(HelixApiAccessToken)
    #       RunAoTTests: $(runAoTTests)








    ############### POST ###############
    - task: CopyFiles@2
      displayName: Copy Logs
      inputs:
        SourceFolder: $(Build.SourcesDirectory)/artifacts
        # TODO: SymStore should not be copied in PR builds
        Contents: |
          log/$(buildConfiguration)/**/*
          TestResults/$(buildConfiguration)/**/*
          SymStore/$(buildConfiguration)/**/*
          tmp/$(buildConfiguration)/**/*.binlog
        TargetFolder: $(Build.ArtifactStagingDirectory)
      continueOnError: true
      condition: always()

    - task: ${{ parameters.oneEsPtCompat.publishTaskName }}
      displayName: Publish Logs
      inputs:
        PathtoPublish: $(Build.ArtifactStagingDirectory)
        ArtifactName: ${{ parameters.pool.os }}_$(System.PhaseName)
        publishLocation: Container
      continueOnError: true
      condition: always()
